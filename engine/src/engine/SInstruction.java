//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package engine;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <all>
 *         <element ref="{}S-Variable"/>
 *         <element ref="{}S-Instruction-Arguments" minOccurs="0"/>
 *         <element ref="{}S-Label" minOccurs="0"/>
 *       </all>
 *       <attribute name="type" use="required">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             <enumeration value="basic"/>
 *             <enumeration value="synthetic"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *       <attribute name="name" use="required">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             <enumeration value="NEUTRAL"/>
 *             <enumeration value="INCREASE"/>
 *             <enumeration value="DECREASE"/>
 *             <enumeration value="JUMP_NOT_ZERO"/>
 *             <enumeration value="ZERO_VARIABLE"/>
 *             <enumeration value="ASSIGNMENT"/>
 *             <enumeration value="GOTO_LABEL"/>
 *             <enumeration value="CONSTANT_ASSIGNMENT"/>
 *             <enumeration value="JUMP_ZERO"/>
 *             <enumeration value="JUMP_EQUAL_CONSTANT"/>
 *             <enumeration value="JUMP_EQUAL_VARIABLE"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 * 
 */
@XmlAccessorType(XmlAccessType.PROPERTY)
@XmlType(name = "", propOrder = {

})
@XmlRootElement(name = "S-Instruction")
public class SInstruction {

    private String sVariable;
    private SInstructionArguments sInstructionArguments;
    private String sLabel;
    private String type;
    private InstructionName name;
    private SInstruction parent;
    private int degree;
    private boolean is_expansion; // tells if command is expanded == parent is null

    public SInstruction() {
        sVariable = "";
        sInstructionArguments = new SInstructionArguments();
        sLabel = "";
        type = "";
        name = InstructionName.UNSUPPORTED;
        parent = null;
        degree = 0;
        is_expansion = false;
    }

    public SInstruction(String name, String variable, String label, HashMap<String, String> arguments) {
        this.name = InstructionName.fromString(name.trim());
        this.sVariable = variable;
        this.sLabel = label;
        setsInstructionArguments(arguments);
        parent = null;
        degree = 0;
        is_expansion = false;
    }

    public int getCycles() {
        return switch (name) {
            case InstructionName.INCREASE, InstructionName.DECREASE -> 1;
            case InstructionName.JUMP_NOT_ZERO -> 2;
            case InstructionName.NEUTRAL -> 0;
            case InstructionName.ZERO_VARIABLE -> 1;
            case InstructionName.GOTO_LABEL -> 1;
            case InstructionName.ASSIGNMENT -> 4;
            case InstructionName.CONSTANT_ASSIGNMENT -> 2;
            case InstructionName.JUMP_ZERO -> 2;
            case InstructionName.JUMP_EQUAL_CONSTANT -> 2;
            case InstructionName.JUMP_EQUAL_VARIABLE -> 2;
            case InstructionName.QUOTE -> 5;
            case InstructionName.JUMP_EQUAL_FUNCTION -> 6;
            default -> throw new IllegalStateException("Invalid instruction name: " + name);
        };
    }

    private String getOperationString(String variable) {
        return switch (name) {
            case InstructionName.INCREASE -> String.format("%s <- %s + 1", variable, variable);
            case InstructionName.DECREASE -> String.format("%s <- %s - 1", variable, variable);
            case InstructionName.JUMP_NOT_ZERO ->
                    String.format("IF %s != 0 GOTO %s", variable, getArgument("JNZLabel"));
            case InstructionName.NEUTRAL -> String.format("%s <- %s", variable, variable);
            case InstructionName.ZERO_VARIABLE -> String.format("%s <- 0", variable);
            case InstructionName.GOTO_LABEL -> String.format("GOTO %s", getArgument("gotoLabel"));
            case InstructionName.ASSIGNMENT -> String.format("%s <- %s", variable, getArgument("assignedVariable"));
            case InstructionName.CONSTANT_ASSIGNMENT ->
                    String.format("%s <- %s", variable, getArgument("constantValue"));
            case InstructionName.JUMP_ZERO -> String.format("IF %s = 0 GOTO %s", variable, getArgument("JZLabel"));
            case InstructionName.JUMP_EQUAL_CONSTANT ->
                    String.format("IF %s = %s GOTO %s", variable, getArgument("constantValue"), getArgument("JEConstantLabel"));
            case InstructionName.JUMP_EQUAL_VARIABLE ->
                    String.format("IF %s = %s GOTO %s", variable, getArgument("variableName"), getArgument("JEVariableLabel"));
            default -> "";
        };
    }

    public String toString() {
        String phase = (Objects.equals(type, "basic")) ? "B" : "S";
        String operation = getOperationString(sVariable);

        return String.format("(%s) [ %-3s ] %s (%d)", phase, this.sLabel, operation, getCycles());
    }

    // returns value of argument name, empty string if not found
    public String getArgument(String name) {
        List<SInstructionArgument> args = sInstructionArguments.getSInstructionArgument();
        if (args != null) {
            for (SInstructionArgument arg : args) {
                if (name.equals(arg.getName())) {
                    return arg.getValue();
                }
            }
        }
        return "";
    }

    /**
     * overwrites value of existing argument name
     * if no such name was found, adds a new argument with the value
     *
     * @param name  name of the argument {@link String }
     * @param value value of the argument {@link String }
     */
    public void setArgument(String name, String value) {
        List<SInstructionArgument> args = sInstructionArguments.getSInstructionArgument();
        boolean found = false;
        if (args != null) {
            for (SInstructionArgument arg : args) {
                if (name.equals(arg.getName())) {
                    arg.setValue(value);
                    found = true;
                }
            }
            if (!found) {
                SInstructionArgument arg = new SInstructionArgument();
                arg.setName(name);
                arg.setValue(value);
                args.add(arg);
            }
        }
    }

    // Checks if argument has a label, if yes, return it
    // otherwise returns an empty string
    // NOTE: this is not the sLabel, but label if the instruction does have a label
    public String getArgumentLabel() {
        List<SInstructionArgument> args = sInstructionArguments.getSInstructionArgument();
        if (args != null) {
            for (SInstructionArgument arg : args) {
                if (InstructionValidator.isValidLabelFormat(arg.getValue())) {
                    return arg.getValue();
                }
            }
        }
        return "";
    }


    public String getSVariable() {
        this.sVariable = sVariable.trim();
        return sVariable;
    }

    @XmlElement(name = "S-Variable", required = true)
    public void setSVariable(String value) {
        this.sVariable = value;
    }

    public SInstructionArguments getSInstructionArguments() {
        return sInstructionArguments;
    }

    @XmlElement(name = "S-Instruction-Arguments")
    public void setSInstructionArguments(SInstructionArguments value) {
        this.sInstructionArguments = value;
    }

    public void setsInstructionArguments(HashMap<String, String> map) {
        List<SInstructionArgument> argumentList = new ArrayList<>();

        if (map != null) {
            for (HashMap.Entry<String, String> entry : map.entrySet()) {
                SInstructionArgument arg = new SInstructionArgument();
                arg.setName(entry.getKey());
                arg.setValue(entry.getValue());
                argumentList.add(arg);
            }
        }

        sInstructionArguments = new SInstructionArguments();
        sInstructionArguments.sInstructionArgument = argumentList;
    }

    public String getSLabel() {
        this.sLabel = sLabel.trim();
        return sLabel;
    }

    @XmlElement(name = "S-Label")
    public void setSLabel(String value) {
        this.sLabel = value.trim();
    }

    public String getType() {
        this.type = type.trim();

        return type;
    }

    @XmlAttribute(name = "type", required = true)
    public void setType(String value) {
        this.type = value;
    }

    public InstructionName getInstructionName() {
        return name;
    }

    public String getName() {
        return name.toString();
    }

    @XmlAttribute(name = "name", required = true)
    public void setName(String value) {
        try {
            this.name = InstructionName.valueOf(value.trim());
        } catch (IllegalArgumentException e) {
            this.name = InstructionName.UNSUPPORTED;
        }
    }

    public void setParent(SInstruction parent) {
        this.parent = parent;
    }

    public SInstruction getParent() {
        return this.parent;
    }

    public int getDegree() {
        return this.degree;
    }

    public void setDegree(int value) {
        this.degree = value;
    }

    public void setIsExpansion(boolean val) {
        this.is_expansion = val;
    }

    public boolean isExpansion() {
        return this.is_expansion;
    }


} // end of class