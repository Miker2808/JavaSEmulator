//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package engine;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <all>
 *         <element ref="{}S-Variable"/>
 *         <element ref="{}S-Instruction-Arguments" minOccurs="0"/>
 *         <element ref="{}S-Label" minOccurs="0"/>
 *       </all>
 *       <attribute name="type" use="required">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             <enumeration value="basic"/>
 *             <enumeration value="synthetic"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *       <attribute name="name" use="required">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             <enumeration value="NEUTRAL"/>
 *             <enumeration value="INCREASE"/>
 *             <enumeration value="DECREASE"/>
 *             <enumeration value="JUMP_NOT_ZERO"/>
 *             <enumeration value="ZERO_VARIABLE"/>
 *             <enumeration value="ASSIGNMENT"/>
 *             <enumeration value="GOTO_LABEL"/>
 *             <enumeration value="CONSTANT_ASSIGNMENT"/>
 *             <enumeration value="JUMP_ZERO"/>
 *             <enumeration value="JUMP_EQUAL_CONSTANT"/>
 *             <enumeration value="JUMP_EQUAL_VARIABLE"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {

})
@XmlRootElement(name = "S-Instruction")
public class SInstruction {

    @XmlElement(name = "S-Variable", required = true)
    protected String sVariable;
    @XmlElement(name = "S-Instruction-Arguments")
    protected SInstructionArguments sInstructionArguments;
    @XmlElement(name = "S-Label")
    protected String sLabel;
    @XmlAttribute(name = "type", required = true)
    protected String type;
    @XmlAttribute(name = "name", required = true)
    protected String name;


    public SInstruction() {
        sLabel = "";
    }

    public SInstruction(String name, String variable, String label, HashMap<String, String> arguments){
        this.name = name;
        this.sVariable = variable;
        this.sLabel = label;
        setsInstructionArguments(arguments);
    }



    public int getCycles(){
        return switch (name) {
            case "INCREASE", "DECREASE" -> 1;
            case "JUMP_NOT_ZERO" -> 2;
            case "NEUTRAL" -> 0;
            case "ZERO_VARIABLE" -> 1;
            case "GOTO_LABEL" -> 1;
            case "ASSIGNMENT" -> 4;
            case "CONSTANT_ASSIGNMENT" -> 2;
            case "JUMP_ZERO" -> 2;
            case "JUMP_EQUAL_CONSTANT" -> 2;
            case "JUMP_EQUAL_VARIABLE" -> 2;
            case "QUOTE" -> 5;
            case "JUMP_EQUAL_FUNCTION" -> 6;
            default -> throw new IllegalStateException("Invalid instruction name: " + name);
        };
    }

    private String getOperationString(String variable) {
        return switch (name) {
            case "INCREASE" -> String.format("%s <- %s + 1", variable, variable);
            case "DECREASE" -> String.format("%s <- %s - 1", variable, variable);
            case "JUMP_NOT_ZERO" -> String.format("IF %s != 0 GOTO %s", variable, getArgument("JNZLabel"));
            case "NEUTRAL" -> String.format("%s <- %s", variable, variable);
            case "ZERO_VARIABLE" -> String.format("%s <- 0", variable);
            case "GOTO_LABEL" -> String.format("GOTO %s", getArgument("gotoLabel"));
            case "ASSIGNMENT" -> String.format("%s <- %s", variable, getArgument("assignedVariable"));
            case "CONSTANT_ASSIGNMENT" -> String.format("%s <- %s", variable, getArgument("constantValue"));
            case "JUMP_ZERO" -> String.format("IF %s = 0 GOTO %s", variable, getArgument("JZLabel"));
            case "JUMP_EQUAL_CONSTANT" ->
                    String.format("IF %s = %s GOTO %s", variable, getArgument("constantValue"), getArgument("JEConstantLabel"));
            case "JUMP_EQUAL_VARIABLE" ->
                    String.format("IF %s = %s GOTO %s", variable, getArgument("variableName"), getArgument("JEVariableLabel"));
            default -> "";
        };
    }

    public String toString() {
        String phase = (Objects.equals(type, "basic")) ? "B" : "S";
        String operation = getOperationString(sVariable);

        return String.format("(%s) [ %-3s ] %s (%d)", phase, this.sLabel, operation, getCycles());
    }



    // returns value of argument name, empty string if not found
    public String getArgument(String name){
        List<SInstructionArgument> args = sInstructionArguments.getSInstructionArgument();
        if (args != null) {
            for (SInstructionArgument arg : args) {
                if (name.equals(arg.getName())) {
                    return arg.getValue();
                }
            }
        }
        return "";
    }

    /**
     * overwrites value of existing argument name
     * if no such name was found, adds a new argument with the value
     * @param name
     *      name of the argument {@link String }
     * @param value
     *      value of the argument {@link String }

     */
    public void setArgument(String name, String value){
        List<SInstructionArgument> args = sInstructionArguments.getSInstructionArgument();
        boolean found = false;
        if (args != null) {
            for (SInstructionArgument arg : args) {
                if (name.equals(arg.getName())) {
                    arg.setValue(value);
                    found = true;
                }
            }
            if (!found) {
                SInstructionArgument arg = new SInstructionArgument();
                arg.setName(name);
                arg.setValue(value);
                args.add(arg);
            }
        }
    }


    /**
     * Gets the value of the sVariable property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSVariable() {
        return sVariable;
    }

    /**
     * Sets the value of the sVariable property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSVariable(String value) {
        this.sVariable = value;
    }

    /**
     * Gets the value of the sInstructionArguments property.
     * 
     * @return
     *     possible object is
     *     {@link SInstructionArguments }
     *     
     */
    public SInstructionArguments getSInstructionArguments() {
        return sInstructionArguments;
    }

    /**
     * Sets the value of the sInstructionArguments property.
     * 
     * @param value
     *     allowed object is
     *     {@link SInstructionArguments }
     *     
     */
    public void setSInstructionArguments(SInstructionArguments value) {
        this.sInstructionArguments = value;
    }

    /**
     * loads from an arguments hashmap into the sInstructionArguments
     * used to make it easy to instantiate SInstruction manually in code, or through XML
     * using the same member object to hold the arguments
     * @param map
     *      allowed object is
     *      {@link HashMap}
     */
     public void setsInstructionArguments(HashMap<String, String> map) {
        List<SInstructionArgument> argumentList = new ArrayList<>();

        if (map != null) {
            for (HashMap.Entry<String, String> entry : map.entrySet()) {
                SInstructionArgument arg = new SInstructionArgument();
                arg.setName(entry.getKey());
                arg.setValue(entry.getValue());
                argumentList.add(arg);
            }
        }

        sInstructionArguments = new SInstructionArguments();
        sInstructionArguments.sInstructionArgument = argumentList;
    }

    /**
     * Gets the value of the sLabel property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSLabel() {
        return sLabel;
    }

    /**
     * Sets the value of the sLabel property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSLabel(String value) {
        this.sLabel = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value)  {
        this.type = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

}
