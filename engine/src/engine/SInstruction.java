//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package engine;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;

import java.util.HashMap;
import java.util.List;
import java.util.Objects;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <all>
 *         <element ref="{}S-Variable"/>
 *         <element ref="{}S-Instruction-Arguments" minOccurs="0"/>
 *         <element ref="{}S-Label" minOccurs="0"/>
 *       </all>
 *       <attribute name="type" use="required">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             <enumeration value="basic"/>
 *             <enumeration value="synthetic"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *       <attribute name="name" use="required">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             <enumeration value="NEUTRAL"/>
 *             <enumeration value="INCREASE"/>
 *             <enumeration value="DECREASE"/>
 *             <enumeration value="JUMP_NOT_ZERO"/>
 *             <enumeration value="ZERO_VARIABLE"/>
 *             <enumeration value="ASSIGNMENT"/>
 *             <enumeration value="GOTO_LABEL"/>
 *             <enumeration value="CONSTANT_ASSIGNMENT"/>
 *             <enumeration value="JUMP_ZERO"/>
 *             <enumeration value="JUMP_EQUAL_CONSTANT"/>
 *             <enumeration value="JUMP_EQUAL_VARIABLE"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {

})
@XmlRootElement(name = "S-Instruction")
public class SInstruction {

    @XmlElement(name = "S-Variable", required = true)
    protected String sVariable;
    @XmlElement(name = "S-Instruction-Arguments")
    protected SInstructionArguments sInstructionArguments;
    @XmlElement(name = "S-Label")
    protected String sLabel;
    @XmlAttribute(name = "type", required = true)
    protected String type;
    @XmlAttribute(name = "name", required = true)
    protected String name;

    private HashMap<String, String> arguments = null;

    public SInstruction() {

        List<SInstructionArgument> sInstructionArgument = sInstructionArguments.getSInstructionArgument();

        if(sInstructionArgument != null) {
            arguments = mapArguments(sInstructionArgument);
        }
        else{
            arguments = new HashMap<>();
        }
    }

    public SInstruction(String name, String variable, String label, HashMap<String, String> arguments){
        this.name = name;
        this.sVariable = variable;
        this.sLabel = label;
        if(arguments != null) {
            this.arguments = new HashMap<>(arguments);
        }
        else{
            this.arguments = new HashMap<>();
        }
    }

    private boolean validateType(){
        boolean isBasic = isBasicInstruction(name);
        if(Objects.equals(type, "synthetic") || Objects.equals(type, "basic")){
            return isBasic && type.equals("basic");
        }
        return false;
    }

    private boolean isBasicInstruction(String name) {
        return Objects.equals(name, "INCREASE") ||
                Objects.equals(name, "DECREASE") ||
                Objects.equals(name, "JUMP_NOT_ZERO") ||
                Objects.equals(name, "NEUTRAL");
    }

    public int getCycles(){
        return switch (name) {
            case "INCREASE", "DECREASE" -> 1;
            case "JUMP_NOT_ZERO" -> 2;
            case "NEUTRAL" -> 0;
            case "ZERO_VARIABLE" -> 1;
            case "GOTO_LABEL" -> 1;
            case "ASSIGNMENT" -> 4;
            case "CONSTANT_ASSIGNMENT" -> 2;
            case "JUMP_ZERO" -> 2;
            case "JUMP_EQUAL_CONSTANT" -> 2;
            case "JUMP_EQUAL_VARIABLE" -> 2;
            case "QUOTE" -> 5;
            case "JUMP_EQUAL_FUNCTION" -> 6;
            default -> throw new IllegalStateException("Invalid instruction name: " + name);
        };
    }

    private String getOperationString(String variable) {
        return switch (name) {
            case "INCREASE" -> String.format("%s <- %s + 1", variable, variable);
            case "DECREASE" -> String.format("%s <- %s - 1", variable, variable);
            case "JUMP_NOT_ZERO" -> String.format("IF %s != 0 GOTO %s", variable, arguments.get("JNZLabel"));
            case "NEUTRAL" -> String.format("%s <- %s", variable, variable);
            case "ZERO_VARIABLE" -> String.format("%s <- 0", variable);
            case "GOTO_LABEL" -> String.format("GOTO %s", arguments.get("gotoLabel"));
            case "ASSIGNMENT" -> String.format("%s <- %s", variable, arguments.get("assignedVariable"));
            case "CONSTANT_ASSIGNMENT" -> String.format("%s <- %s", variable, arguments.get("constantValue"));
            case "JUMP_ZERO" -> String.format("IF %s = 0 GOTO %s", variable, arguments.get("JZLabel"));
            case "JUMP_EQUAL_CONSTANT" ->
                    String.format("IF %s = %s GOTO %s", variable, arguments.get("constantValue"), arguments.get("JEConstantLabel"));
            case "JUMP_EQUAL_VARIABLE" ->
                    String.format("IF %s = %s GOTO %s", variable, arguments.get("variableName"), arguments.get("JEVariableLabel"));
            default -> "";
        };
    }

    public String toString() {
        String phase = (Objects.equals(type, "basic")) ? "B" : "S";
        String operation = getOperationString(sVariable);

        return String.format("(%s) [ %-3s ] %s (%d)", phase, this.sLabel, operation, getCycles());
    }

    // for now case-sensitive
    public static boolean isValidVariable(String input) {
        // Regex explanation:
        // ^(y|[xz][1-9][0-9]*)$
        // y                 → exactly "y"
        // |                 → OR
        // [xz][1-9][0-9]*   → x or z followed by number starting with 1-9, then digits
        return input.matches("^(y|[xz][1-9][0-9]*)$");
    }

    // for now case-sensitive
    public static boolean isValidLabel(String input){
        return input.matches("^(EXIT|L[1-9][0-9]*)$");
    }

    public HashMap<String, String> getArguments() {
        return new HashMap<>(arguments);
    }

    private HashMap<String, String> mapArguments(List<SInstructionArgument> args){
        HashMap<String, String> map = new HashMap<>();
        for (SInstructionArgument arg : args) {
            map.put(arg.getName(), arg.getValue());
        }
        return map;
    }

    /**
     * Gets the value of the sVariable property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSVariable() {
        return sVariable;
    }

    /**
     * Sets the value of the sVariable property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSVariable(String value) {
        this.sVariable = value;
    }

    /**
     * Gets the value of the sInstructionArguments property.
     * 
     * @return
     *     possible object is
     *     {@link SInstructionArguments }
     *     
     */
    public SInstructionArguments getSInstructionArguments() {
        return sInstructionArguments;
    }

    /**
     * Sets the value of the sInstructionArguments property.
     * 
     * @param value
     *     allowed object is
     *     {@link SInstructionArguments }
     *     
     */
    public void setSInstructionArguments(SInstructionArguments value) {
        this.sInstructionArguments = value;
    }

    /**
     * Gets the value of the sLabel property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSLabel() {
        return sLabel;
    }

    /**
     * Sets the value of the sLabel property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSLabel(String value) {
        this.sLabel = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

}
