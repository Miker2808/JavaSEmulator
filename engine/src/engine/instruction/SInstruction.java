//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package engine.instruction;

import engine.SVariable.SVariable;
import engine.arguments.SInstructionArgument;
import engine.arguments.SInstructionArguments;
import engine.execution.ExecutionContext;
import engine.expander.ExpansionContext;
import engine.validator.InstructionValidator;
import jakarta.xml.bind.annotation.*;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


@XmlAccessorType(XmlAccessType.PROPERTY)
@XmlType(name = "", propOrder = {

})
@XmlRootElement(name = "S-Instruction")
public class SInstruction implements Serializable {


    private String sVariable;
    private SInstructionArguments sInstructionArguments;
    private String sLabel;
    private String type;
    private InstructionName name;
    private int degree; //
    private int cycles; // number of cycles for the program
    private int line;

    // parent stuff
    private int parent_line; // line of instruction in a program
    private SInstruction parent;

    private SVariable sVariableSmart;

    public SInstruction() {
        sVariable = "";
        sInstructionArguments = new SInstructionArguments();
        sLabel = "";
        type = "";
        name = InstructionName.UNSUPPORTED;
        degree = 0;
        cycles = 0;
        parent = null;
        parent_line = 0; // unassigned
    }

    // copy constructor
    public SInstruction(SInstruction other){
        this.sVariable = other.getSVariable();
        this.sInstructionArguments = new SInstructionArguments(other.getSInstructionArguments());
        this.sLabel = other.getSLabel();
        this.type = other.getType();
        this.name = other.getInstructionName();
        this.parent = other.getParent();
        this.degree = other.getDegree();
        this.parent_line = other.getParentLine();
        this.sVariableSmart = other.sVariableSmart;
    }

    public SInstruction copy(){
        return new SInstruction(this);

    }

    public int getCycles(){
        return this.cycles;
    }

    public String getCyclesStr(){
        if(this.name == InstructionName.QUOTE || this.name == InstructionName.JUMP_EQUAL_FUNCTION){
            return String.format("+%d", getCycles());
        }
        else{
            return String.format("%d", getCycles());
        }
    }

    public void setCycles(int value){
        this.cycles = value;
    }

    public int getDegree(){
        return this.degree;
    }

    public void setDegree(int value){
        this.degree = value;
    }

    public void setLine(int value){
        this.line = value;
    }
    public int getLine(){
        return this.line;
    }

    public void execute(ExecutionContext context){

    }

    public String getInstructionString(){
        return "";
    }

    // returns basic old string, (Useless)
    public String toString() {
        String type_short = (Objects.equals(type, "basic")) ? "B" : "S";
        String operation = getInstructionString();
        return String.format("(%s) [ %-3s ] %s (%d)", type_short, getSLabel(), operation, getCycles());
    }

    // converts to string with full expansion if present (Useless now)
    public String toFullString(){
        StringBuilder output = new StringBuilder();
        output.append(toString());

        SInstruction parent = getParent();
        int parent_line = getParentLine();
        while(parent != null){

            output.append(String.format(" >>> #%d %s", parent_line, parent.toString()));
            parent_line = parent.getParentLine();
            parent = parent.getParent();
        }

        return output.toString();
    }


    // returns value of argument name, empty string if not found
    public String getArgument(String name) {
        List<SInstructionArgument> args = sInstructionArguments.getSInstructionArgument();
        if (args != null) {
            for (SInstructionArgument arg : args) {
                if (name.equals(arg.getName())) {
                    return arg.getValue();
                }
            }
        }
        return "";
    }

    /**
     * overwrites value of existing argument name
     * if no such name was found, adds a new argument with the value
     *
     * @param name  name of the argument {@link String }
     * @param value value of the argument {@link String }
     */
    public void setArgument(String name, String value) {
        List<SInstructionArgument> args = sInstructionArguments.getSInstructionArgument();
        boolean found = false;
        if (args != null) {
            for (SInstructionArgument arg : args) {
                if (name.equals(arg.getName())) {
                    arg.setValue(value);
                    found = true;
                }
            }
            if (!found) {
                SInstructionArgument arg = new SInstructionArgument();
                arg.setName(name);
                arg.setValue(value);
                args.add(arg);
            }
        }
    }

    // returns argument label, empty string if it doesn't exist
    // overridden by derived class
    public String getArgumentLabel() {
        return "";
    }

    public String getArgumentVariable(){
        return "";
    }

    public void setArgumentLabel(String label){
    }

    public void setFunctionArguments(String functionArguments) {}

    public String getFunctionArguments() {
        return "";
    }

    public void setArgumentVariable(String variable){
    }

    // return argument const as string format
    public String getArgumentConst(){
        return "";
    }

    public String getSVariable() {
        return sVariable;
    }

    @XmlElement(name = "S-Variable", required = true)
    public void setSVariable(String value) {
        this.sVariable = value.trim().toLowerCase();
        this.sVariableSmart = new SVariable(sVariable);
    }

    public SInstructionArguments getSInstructionArguments() {
        return sInstructionArguments;
    }

    @XmlElement(name = "S-Instruction-Arguments")
    public void setSInstructionArguments(SInstructionArguments value) {
        this.sInstructionArguments = value;
    }

    public String getSLabel() {
        return sLabel;
    }

    @XmlElement(name = "S-Label")
    public void setSLabel(String value) {
        this.sLabel = value.trim().toUpperCase();
    }

    public String getType() {
        return type;
    }

    public String getTypeShort(){
        return (Objects.equals(type, "basic")) ? "B" : "S";
    }

    @XmlAttribute(name = "type", required = true)
    public void setType(String value) {
        this.type = value.trim().toLowerCase();
    }

    public InstructionName getInstructionName() {
        return name;
    }

    public String getName() {
        return name.toString();
    }

    @XmlAttribute(name = "name", required = true)
    public void setName(String value) {
        try {
            this.name = InstructionName.valueOf(value.trim());
        } catch (IllegalArgumentException e) {
            this.name = InstructionName.UNSUPPORTED;
        }
    }

    public void setInstructionName(InstructionName name) {
        this.name = name;
    }

    public void setParent(SInstruction parent) {
        this.parent = parent;
    }

    public SInstruction getParent() {
        return this.parent;
    }

    public int getParentLine(){
        return this.parent_line;
    }

    public void setParentLine(int value){
        this.parent_line = value;
    }

    public void validate(InstructionValidator validator) throws InvalidInstructionException {
        validator.validate(this);
    }

    public List<SInstruction> expand(ExpansionContext context, int line){
        List<SInstruction> expanded = new ArrayList<>();
        expanded.add(this);
        return expanded;
    }

    public SVariable getSVariableS(){
        return sVariableSmart;
    }

    public int getGeneration(){
        return switch (this.getInstructionName()){
            case NEUTRAL, INCREASE, DECREASE, JUMP_NOT_ZERO -> 1;
            case ZERO_VARIABLE, CONSTANT_ASSIGNMENT, GOTO_LABEL -> 2;
            case ASSIGNMENT, JUMP_ZERO, JUMP_EQUAL_CONSTANT, JUMP_EQUAL_VARIABLE -> 3;
            default -> 4;
        };
    }

    public String getGenStr(){
        return switch (this.getGeneration()) {
            case 1 -> "I";
            case 2 -> "II";
            case 3 -> "III";
            case 4 -> "IV";
            default -> "";
        };
    }


} // end of class