//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package engine.instruction;

import engine.validator.InstructionValidator;
import engine.arguments.SInstructionArgument;
import engine.arguments.SInstructionArguments;
import jakarta.xml.bind.annotation.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;

import static engine.validator.InstructionValidator.*;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <all>
 *         <element ref="{}S-Variable"/>
 *         <element ref="{}S-Instruction-Arguments" minOccurs="0"/>
 *         <element ref="{}S-Label" minOccurs="0"/>
 *       </all>
 *       <attribute name="type" use="required">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             <enumeration value="basic"/>
 *             <enumeration value="synthetic"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *       <attribute name="name" use="required">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             <enumeration value="NEUTRAL"/>
 *             <enumeration value="INCREASE"/>
 *             <enumeration value="DECREASE"/>
 *             <enumeration value="JUMP_NOT_ZERO"/>
 *             <enumeration value="ZERO_VARIABLE"/>
 *             <enumeration value="ASSIGNMENT"/>
 *             <enumeration value="GOTO_LABEL"/>
 *             <enumeration value="CONSTANT_ASSIGNMENT"/>
 *             <enumeration value="JUMP_ZERO"/>
 *             <enumeration value="JUMP_EQUAL_CONSTANT"/>
 *             <enumeration value="JUMP_EQUAL_VARIABLE"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 * 
 */
@XmlAccessorType(XmlAccessType.PROPERTY)
@XmlType(name = "", propOrder = {

})
@XmlRootElement(name = "S-Instruction")
public class SInstruction {

    private String sVariable;
    private SInstructionArguments sInstructionArguments;
    private String sLabel;
    private String type;
    private InstructionName name;
    private SInstruction parent;
    private int degree;
    private int cycles;

    public SInstruction() {
        sVariable = "";
        sInstructionArguments = new SInstructionArguments();
        sLabel = "";
        type = "";
        name = InstructionName.UNSUPPORTED;
        degree = 0;
        cycles = 0;

    }

    // copy constructor, all my homies love copy constructors
    public SInstruction(SInstruction other){
        this.sVariable = other.getSVariable();
        this.sInstructionArguments = new SInstructionArguments(other.getSInstructionArguments());
        this.sLabel = other.getSLabel();
        this.type = other.getType();
        this.name = other.getInstructionName();
        this.parent = other.getParent();
        this.degree = other.getDegree();
    }

    public int getCycles(){
        return this.cycles;
    }

    public void setCycles(int value){
        this.cycles = value;
    }

    public int getDegree(){
        return this.degree;
    }

    public void setDegree(int value){
        this.degree = value;
    }

    protected String getOperationString(String variable) {
        return "";
    }

    public String toString() {
        String phase = (Objects.equals(type, "basic")) ? "B" : "S";
        String operation = getOperationString(sVariable);

        return String.format("(%s) [ %-3s ] %s (%d)", phase, this.sLabel, operation, getCycles());
    }

    // returns value of argument name, empty string if not found
    public String getArgument(String name) {
        List<SInstructionArgument> args = sInstructionArguments.getSInstructionArgument();
        if (args != null) {
            for (SInstructionArgument arg : args) {
                if (name.equals(arg.getName())) {
                    return arg.getValue();
                }
            }
        }
        return "";
    }

    /**
     * overwrites value of existing argument name
     * if no such name was found, adds a new argument with the value
     *
     * @param name  name of the argument {@link String }
     * @param value value of the argument {@link String }
     */
    public void setArgument(String name, String value) {
        List<SInstructionArgument> args = sInstructionArguments.getSInstructionArgument();
        boolean found = false;
        if (args != null) {
            for (SInstructionArgument arg : args) {
                if (name.equals(arg.getName())) {
                    arg.setValue(value);
                    found = true;
                }
            }
            if (!found) {
                SInstructionArgument arg = new SInstructionArgument();
                arg.setName(name);
                arg.setValue(value);
                args.add(arg);
            }
        }
    }

    // returns argument label, empty string if it doesn't exist
    // overridden by derived class
    public String getArgumentLabel() {
        return "";
    }

    public String getArgumentVariable(){
        return "";
    }

    // return argument const as string format
    public String getArgumentConst(){
        return "";
    }

    public String getSVariable() {
        this.sVariable = sVariable.trim();
        return sVariable;
    }

    @XmlElement(name = "S-Variable", required = true)
    public void setSVariable(String value) {
        this.sVariable = value;
    }

    public SInstructionArguments getSInstructionArguments() {
        return sInstructionArguments;
    }

    @XmlElement(name = "S-Instruction-Arguments")
    public void setSInstructionArguments(SInstructionArguments value) {
        this.sInstructionArguments = value;
    }

    public String getSLabel() {
        this.sLabel = sLabel.trim();
        return sLabel;
    }

    @XmlElement(name = "S-Label")
    public void setSLabel(String value) {
        this.sLabel = value.trim();
    }

    public String getType() {
        this.type = type.trim();

        return type;
    }

    @XmlAttribute(name = "type", required = true)
    public void setType(String value) {
        this.type = value;
    }

    public InstructionName getInstructionName() {
        return name;
    }

    public String getName() {
        return name.toString();
    }

    @XmlAttribute(name = "name", required = true)
    public void setName(String value) {
        try {
            this.name = InstructionName.valueOf(value.trim());
        } catch (IllegalArgumentException e) {
            this.name = InstructionName.UNSUPPORTED;
        }
    }

    public void setInstructionName(InstructionName name) {
        this.name = name;
    }

    public void setParent(SInstruction parent) {
        this.parent = parent;
    }

    public SInstruction getParent() {
        return this.parent;
    }

    public void validate(InstructionValidator validator) throws InvalidInstructionException {
        validator.validate(this);
    }

} // end of class