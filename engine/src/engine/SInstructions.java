//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package engine;

import engine.instruction.InvalidInstructionException;
import engine.instruction.SInstruction;
import engine.instruction.SInstructionAdapter;
import jakarta.xml.bind.annotation.*;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;


/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element ref="{}S-Instruction" maxOccurs="unbounded"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "sInstruction"
})
@XmlRootElement(name = "S-Instructions")
public class SInstructions implements Serializable {

    @XmlElement(name = "S-Instruction", required = true)
    @XmlJavaTypeAdapter(SInstructionAdapter.class)
    private List<SInstruction> sInstruction;

    public SInstructions() {
        this.sInstruction = new ArrayList<>();
        updateInstructionsLines();
    }

    public SInstructions(List<SInstruction> sInstruction) {
        this.sInstruction = sInstruction;
        updateInstructionsLines();
    }

    protected void updateInstructionsLines(){
        for(int i = 0; i < sInstruction.size(); i++){
            sInstruction.get(i).setLine(i+1);
        }
    }

    public SInstruction getInstruction(int line_num) {
        return sInstruction.get(line_num - 1);
    }

    public void append(SInstruction instruction){
        instruction.setLine(sInstruction.size()+1);
        sInstruction.add(instruction);

    }

    // Returns list of input variables used in program in order
    public List<String> getInputVariablesUsed(){
        List<String> vars = new ArrayList<>();

        for (int line = 1; line <= size(); line++){
            SInstruction instr = getInstruction(line);

            String variable = instr.getSVariable();

            // check that the variable itself is input variable, append if yes
            if(variable.matches("^(x[1-9][0-9]*)$") && !vars.contains(variable))
                vars.add(variable);

            String argVariable = instr.getArgumentVariable();

            if(argVariable.matches("^(x[1-9][0-9]*)$") && !vars.contains(argVariable)){
                vars.add(argVariable);
            }

            // the idea why to check both is because sometimes it might be x1 <- x2,
            // and then you will want to add x1 and x2 to the input variables list
            // (even though x1 is redundant logically)
        }

        vars.sort(Comparator.comparingInt(v -> Integer.parseInt(v.substring(1))));

        return vars;
    }

    public int getMaxDegree(){
        int max_degree = 0;
        for(int line = 1; line <= size(); line++){
            int currDegree = getInstruction(line).getDegree();
            if(max_degree < currDegree){
                max_degree = currDegree;
            }
        }
        return max_degree;
    }

    // validates that all used labels jump to a line
    public void validateLabelsUsed() throws InvalidInstructionException {

        for(int line = 1; line <= size(); line++){
            String argLabel = this.getInstruction(line).getArgumentLabel();
            if(!argLabel.isEmpty() && !argLabel.equals("EXIT")){
                boolean found = false;
                for(int line2 = 1; line2 <= size(); line2++){
                    String sLabel = this.getInstruction(line2).getSLabel();
                    if(sLabel.equals(argLabel)){
                        found = true;
                    }
                }
                if(!found){
                    throw new InvalidInstructionException(String.format("Instruction #%d, label %s does not jump anywhere",
                            line, argLabel));
                }
            }
        }

    }

    public int getMaxUsedLabel(){
        int max_label_num = 1;
        for(int line = 1; line <= size(); line++){
            String sLabel = getInstruction(line).getSLabel();
            if(sLabel.startsWith("L")) {
                int label_num = Integer.parseInt(sLabel.substring(1));
                if (label_num > max_label_num) {
                    max_label_num = label_num;
                }
            }
        }
        return max_label_num;
    }

    public int getMaxUsedZVariable(){
        int max_z_var = 1;
        for(int line = 1; line <= size(); line++){
            String sVariable = getInstruction(line).getSVariable();
            if(sVariable.startsWith("z")) {
                int var_num = Integer.parseInt(sVariable.substring(1));
                if (var_num > max_z_var) {
                    max_z_var = var_num;
                }
            }
        }
        return max_z_var;
    }

    public void addAll(List<SInstruction> instructions){
        sInstruction.addAll(instructions);
    }

    public void appendInstruction(SInstruction instr){
        sInstruction.add(instr);
    }

    public int size(){
        return sInstruction.size();
    }



}
