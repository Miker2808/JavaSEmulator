//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package engine;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;

import java.util.List;

/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element ref="{}S-Instructions"/>
 *       </sequence>
 *       <attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "sInstructions"
})
@XmlRootElement(name = "S-Program")
public class SProgram {

    @XmlElement(name = "S-Instructions", required = true)
    protected SInstructions sInstructions = new SInstructions();
    @XmlAttribute(name = "name", required = true)
    protected String name;


    public String toString(){

        return "Program name: " + name + "\n" +
                "\nUsed input variables (in order of appearance):\n" +
                getInputVariablesString() +
                "\nUsed labels (in order of appearance):\n" +
                getLabelsString() +
                "\nProgram:\n" +
                getInstructionsString() +
                "\n";
    }

    public String getInstructionsString(){
        StringBuilder output = new StringBuilder();
        for (int line = 1; line <= Size(); line++){
            output.append(String.format("#%s %s\n", line, this.getInstruction(line).toString()));
        }
        return output.toString();
    }

    /**
     * Returns string of all variables used in the program
     * seperated by line
     * @return String of variables
     */
    public String getInputVariablesString(){
        StringBuilder output = new StringBuilder();

        for (int line = 1; line <= Size(); line++){
            SInstruction instr = this.getInstruction(line);

            String variable = instr.getSVariable();

            // check that the variable itself is input variable, append if yes
            if(variable.matches("^(x[1-9][0-9]*)$"))
                output.append(String.format("%s\n", variable));

            // I didn't design the class and members hierarchy, was done through the given xml format
            List<SInstructionArgument> arguments = instr.getSInstructionArguments().getSInstructionArgument();

            // check if one of the arguments is input variable, append if yes
            for (SInstructionArgument argument : arguments){
                if(argument.getValue().matches("^(x[1-9][0-9]*)$"))
                    output.append(String.format("%s\n", argument.getValue()));
            }

            // the idea why to check both is because sometimes it might be x1 <- x2,
            // and then you will want to add x1 and x2 to the input variables list
            // (even though x1 is redundant logically)

        }

        return output.toString();
    }

    /**
     *  Returns string of labels seperated by line
     *  if EXIT label exists, it is printed at the end.
     * @return String of labels
     */

    public String getLabelsString(){
        StringBuilder output = new StringBuilder();
        boolean isExitAvailable = false;

        for (int line = 1; line <= Size(); line++){
            String label = this.getInstruction(line).getSLabel();
            if(!label.equals("EXIT") && !label.isEmpty()) {
                output.append(String.format("%s\n", label));
            }
            else{
                isExitAvailable = true;
            }
        }

        if(isExitAvailable){
            output.append("EXIT\n");
        }

        return output.toString();
    }

    public void appendInstruction(SInstruction instruction){
        sInstructions.getSInstruction().add(instruction);
    }

    public void removeInstruction(int line_num){
        sInstructions.getSInstruction().remove(line_num - 1);
    }

    public void insertInstruction(int line_num, SInstruction instruction){
        sInstructions.getSInstruction().add(line_num - 1, instruction);
    }

    public SInstruction getInstruction(int line_num) {
        return sInstructions.getSInstruction().get(line_num - 1);
    }

    public int Size(){
        return sInstructions.getSInstruction().size(); // number of instructions in the program
    }

    public void validateProgram() throws InvalidInstructionException{
        if(this.name == null){
            throw new InvalidInstructionException("S-Program name is required");
        }

        for(int line = 1; line <= Size(); line++){
            try {
                InstructionValidator.validateInstruction(this.getInstruction(line));
            } catch (InvalidInstructionException e) {
                throw new InvalidInstructionException(String.format("Instruction #%d, %s\n", line, e.getMessage()));
            }
        }
    }


    /**
     * Gets the value of the sInstructions property.
     * 
     * @return
     *     possible object is
     *     {@link SInstructions }
     *     
     */
    public SInstructions getSInstructions() {
        return sInstructions;
    }

    /**
     * Sets the value of the sInstructions property.
     * 
     * @param value
     *     allowed object is
     *     {@link SInstructions }
     *     
     */
    public void setSInstructions(SInstructions value) {
        this.sInstructions = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

}
