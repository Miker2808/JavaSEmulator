//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package engine;

import engine.functions.SFunctions;
import engine.instruction.InvalidInstructionException;
import engine.instruction.SInstruction;
import engine.validator.InstructionValidator;
import jakarta.xml.bind.annotation.*;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element ref="{}S-Instructions"/>
 *       </sequence>
 *       <attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "sInstructions",
    "sFunctions"
})
@XmlRootElement(name = "S-Program")
public class SProgram implements Serializable {

    @XmlElement(name = "S-Instructions", required = true)
    protected SInstructions sInstructions = new SInstructions();

    @XmlElement(name = "S-Functions")
    protected SFunctions sFunctions;

    @XmlAttribute(name = "name", required = true)
    protected String name;



    public SInstruction getInstruction(int line_num){
        return sInstructions.getInstruction(line_num);
    }




    public int Size(){
        return sInstructions.size(); // number of instructions in the program
    }

    public void validateProgram() throws InvalidInstructionException {
        if(this.name == null){
            throw new InvalidInstructionException("S-Program name is required");
        }
        // validate program in general
        InstructionValidator validator = new InstructionValidator();
        for(int line = 1; line <= Size(); line++){
            try {
                // validator.validate(this.getInstruction(line)); // old
                getInstruction(line).validate(validator); // new

            } catch (InvalidInstructionException e) {
                throw new InvalidInstructionException(String.format("Instruction #%d, %s\n", line, e.getMessage()));
            }
        }

        // find that all labels are used
        sInstructions.validateLabelsUsed();
    }


    public SInstructions getSInstructions() {
        sInstructions.updateInstructionsLines();
        return sInstructions;
    }

    public void setSInstructions(SInstructions value) {
        this.sInstructions = value;
    }


    public String getName() {
        return name;
    }

    public void setName(String value) {
        this.name = value;
    }

    public SFunctions getSFunctions() {
        return sFunctions;
    }

    public void setSFunctions(SFunctions value) {
        this.sFunctions = value;
    }

}
