//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package engine;

import engine.instruction.InvalidInstructionException;
import engine.instruction.SInstruction;
import engine.validator.InstructionValidator;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;

import java.util.ArrayList;
import java.util.List;

/**
 * <p>Java class for anonymous complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType>
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element ref="{}S-Instructions"/>
 *       </sequence>
 *       <attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "sInstructions"
})
@XmlRootElement(name = "S-Program")
public class SProgram {

    @XmlElement(name = "S-Instructions", required = true)
    protected SInstructions sInstructions = new SInstructions();
    @XmlAttribute(name = "name", required = true)
    protected String name;


    // Returns list of input variables used in program in order
    public List<String> getInputVariablesUsed(){
        List<String> output = new ArrayList<>();

        for (int line = 1; line <= Size(); line++){
            SInstruction instr = this.getInstruction(line);

            String variable = instr.getSVariable();

            // check that the variable itself is input variable, append if yes
            if(variable.matches("^(x[1-9][0-9]*)$"))
                output.add(variable);

            String argVariable = instr.getArgumentVariable();

            if(argVariable.matches("^(x[1-9][0-9]*)$")){
                output.add(argVariable);
            }

            // the idea why to check both is because sometimes it might be x1 <- x2,
            // and then you will want to add x1 and x2 to the input variables list
            // (even though x1 is redundant logically)
        }

        return output;
    }

    // returns list of labels used in order
    public List<String> getLabelsUsed(){
        List<String> output = new ArrayList<>();
        boolean isExitAvailable = false;

        for (int line = 1; line <= Size(); line++){
            String label = this.getInstruction(line).getSLabel();
            if(!label.equals("EXIT") && !label.isEmpty()) {
                output.add(label);
            }
            else{
                isExitAvailable = true;
            }
        }

        if(isExitAvailable){
            output.add("EXIT\n");
        }

        return output;
    }

    /** appends a copy, not a reference */
    public void appendInstruction(SInstruction instruction){
        sInstructions.getSInstruction().add(instruction);
    }

    public void removeInstruction(int line_num){
        sInstructions.getSInstruction().remove(line_num - 1);
    }

    /** inserts a copy of the instruction not a reference! */
    public void insertInstruction(int line_num, SInstruction instruction){
        sInstructions.getSInstruction().add(line_num - 1, instruction);
    }

    /** returns a refence, not a copy! */
     public SInstruction getInstruction(int line_num) {
        return sInstructions.getSInstruction().get(line_num - 1);
    }

    public int Size(){
        return sInstructions.getSInstruction().size(); // number of instructions in the program
    }

    public void validateProgram() throws InvalidInstructionException {
        if(this.name == null){
            throw new InvalidInstructionException("S-Program name is required");
        }
        // validate program in general
        InstructionValidator validator = new InstructionValidator();
        for(int line = 1; line <= Size(); line++){
            try {
                // validator.validate(this.getInstruction(line)); // old
                this.getInstruction(line).validate(validator); // new

            } catch (InvalidInstructionException e) {
                throw new InvalidInstructionException(String.format("Instruction #%d, %s\n", line, e.getMessage()));
            }
        }

        // find that all labels are used
        validateLabelsUsed();
    }

    // validates that all used labels jump to a line
    private void validateLabelsUsed() throws InvalidInstructionException{

        for(int line = 1; line <= Size(); line++){
            String argLabel = this.getInstruction(line).getArgumentLabel();
            if(!argLabel.isEmpty() && !argLabel.equals("EXIT")){
                boolean found = false;
                for(int line2 = 1; line2 <= Size(); line2++){
                    String sLabel = this.getInstruction(line2).getSLabel();
                    if(sLabel.equals(argLabel)){
                        found = true;
                    }
                }
                if(!found){
                    throw new InvalidInstructionException(String.format("Instruction #%d, label %s does not jump anywhere",
                            line, argLabel));
                }
            }
        }

    }

    public int getMaxUsedLabel(){
        int max_label_num = 1;
        for(int line = 1; line <= Size(); line++){
            String sLabel = getInstruction(line).getSLabel();
            if(sLabel.startsWith("L")) {
                int label_num = Integer.parseInt(sLabel.substring(1));
                if (label_num > max_label_num) {
                    max_label_num = label_num;
                }
            }
        }
        return max_label_num;
    }

    public int getMaxUsedZVariable(){
        int max_z_var = 1;
        for(int line = 1; line <= Size(); line++){
            String sVariable = getInstruction(line).getSVariable();
            if(sVariable.startsWith("z")) {
                int var_num = Integer.parseInt(sVariable.substring(1));
                if (var_num > max_z_var) {
                    max_z_var = var_num;
                }
            }
        }
        return max_z_var;
    }

    public void addAll(List<SInstruction> instructions){
         sInstructions.getSInstruction().addAll(instructions);
    }

    /**
     * Gets the value of the sInstructions property.
     *
     * @return
     *     possible object is
     *     {@link SInstructions }
     *
     */
    public SInstructions getSInstructions() {
        return sInstructions;
    }

    /**
     * Sets the value of the sInstructions property.
     *
     * @param value
     *     allowed object is
     *     {@link SInstructions }
     *
     */
    public void setSInstructions(SInstructions value) {
        this.sInstructions = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    public int getMaxDegree(){
        int max_degree = 0;
        for(int line = 1; line <= Size(); line++){
            int currDegree = getInstruction(line).getDegree();
            if(max_degree < currDegree){
                max_degree = currDegree;
            }
        }
        return max_degree;
    }

}
